c
@employee.attendance_date 
@employee.attendance_date != Date.today
c
@employee.update(appearance: "Present", attendance_count:  "#{@attendance + 1}")
@attendance = @employee.attendance_count
c
Employee
@employee.update("attendance_count")
@employee.update(attendance_count: +2)
@employee.update(attendance_count: +1)
@employee.attendance_count
@employee.update(attendance_count:  + 1)
c
@employee.attendance_date != Date.today
 (@employee.appearance == nil )
 (@employee.appearance == "Checkout")
 (@employee.appearance == "Checkout"))
@employee.attendance_date == Date.today) or ((@employee.appearance == nil) or (@employee.appearance == "Checkout"))
@employee.attendance_date == Date.today
c
@employee.update(appearance: "Checkout")
c
@employee.update!(appearance: "Checkout")
c
@employee.update!(appearance: "Checkout")
@employee.update1(appearance: "Checkout")
@employee.update(appearance: "Checkout")
c
@employee.appearance == "present"
c
@employee.appearance c
@employee.appearance 
@employee
@mployee
c
current_employee.appearance
current_employee
c
@employee.update!(appearance: "Present", attendance_count:  + 1)
c
@employee.update!(appearance: "Present", attendance_count:  + 1)c
@employee.update!(appearance: "Present", attendance_count:  + 1)
c
@employee.update!(appearance: "Present", attendance_count:  + 1)
@employee.update(appearance: "Present", attendance_count:  + 1)
c
@employee.update!(appearance: "Present", attendance_count:  + 1)
c
@employee.update!(appearance: "Present", attendance_count:  + 1)
c
@employee.update(appearance: "Present", attendance_count:  + 1)
c
params
@employee.update(appearance: "Present", attendance_count:  + 1)
c
@employee
@employee.encrypted_password
@employee.update(appearance: "Present", attendance_count:  + 1)
c
current_employee.current_password
current_password
@employee.update(appearance: "Present", attendance_count:  + 1)
c
@employee.update(appearance: "Present", attendance_count:  + 1) validate: encrypted_password, allow_blank: true
@employee.update(appearance: "Present", attendance_count:  + 1), validate: encrypted_password, allow_blank: true
c
@employee.update(appearance: "Present", attendance_count:  + 1)
c
 @employee.update!(appearance: "Present", attendance_count:  + 1)
 @employee.update(appearance: "Present", attendance_count:  + 1)
c
@employee.appearance == nil
@employee.attendance_date
@employee
c
@employee
c
@department.id
c
@department.id
@department
c
@department.id
@designation.id
c
@designation.name
@designation
c
@employee
@emoloyee
Date.tomorrow
(Date.tomorrow) and ((@employee.appearance == nil) or (@employee.appearance == "Absent"))
(Date.tommorow) and ((@employee.appearance == nil) or (@employee.appearance == "Absent"))
(Date.today) and ((@employee.appearance == nil) or (@employee.appearance == "Absent"))
@employee.attendance_count
c
@employee.update!(appearance: "present", address:'kjsdhfgasjgfasdjfkgasjgdfsdasgfjgasdhfdfgdfhd', password: 'Sachin@2000')
@employee.update!(appearance: "present")
@employee
@employee.update(appearance: "present")
@employee.update_column(appearance: "present")
@employee.update_attribute(appearance: "present")
@employee
@employee.update_attribute(appearance: "Present", attendance_count:  + 1)
c
@employee.attendance_count
@employee.update!(attendance_count: +1)
@employee.update!(attendance_count: +!)
@employee.update!(attendance_count: "#{attendance_count}")
@employee.update!(attendance_count: "#{attendance_count + 1}")
@employee.update!(attendance_count: "#{attendance_count + 1}"
@employee
attendance_count + 1
c
Date.today and @employee.available == false
Date.today
@employee.update!(appearance: "Present")
c
@employee.update!(appearance: "Present")
@employee.update(appearance: "Present")
@employee.available
@employee
c
@employee.update(appearance: "present")
@employee.update(apperance: "present")
@employee
c
ap Employee.where("first_name iLIKE ?", "%#{search == nil }%")
search
Employee.where("first_name iLIKE ?", "%#{search == nil }%")
c
 employee_signed_in? && employees_url == "http://localhost:3000/employees"
 employee_signed_in? && current_employee.is_admin == false && employees_url == "http://localhost:3000/employees"
 employee_signed_in? && current_employee.is_admin == true && employees_url == "http://localhost:3000/employees"
c
 employees_url == "http://localhost:3000/employees"
if employees_url == "http://localhost:3000/employees"
if employees_url == http://localhost:3000/employees
employees_url
employee_url
URl
URI
url
current_url
page
current_page
c
@designations[1].name
@designations[1].id
@designations[1][1]
@designations[1]
@designations[1][1]
@designations[1]
ap @designations
@designations
@designation
c
ap  Department.find(params[:departmecnt]).designations
ap  Department.find(params[:department]).designations
 Department.find(params[:department]).designations
@designations
@designation
@designatio
c
@designation
c
department_path(args)
c
`http://localhost:3000/departments/#{args}`
c
`http://localhost:3000/departments/?=#{args}`
c
'http://localhost:3000/departments/?'+4.to_query
@designation.department_id
c
@department.designations
@department.designation
@department
c
params
parameters
@department.id
params
@department
@designation
c
id
params[:id]
params
c
Department.find(params[:department_id])
params
c
params
c
Department.find(params[:id])
params
current_employee
current_user
c
params
c
@employee
@designation
c
@designation
c
@project.employees.find(@employee.id).destroy
 update or delete on table "employees" violates foreign key constraint "fk_rails_d80048421d" on table "assignedprojects"
@employee
c
@project.employees.find(@employee.id).delete
@project.employees.find(@employee.id)
project.employees.find(@employee.id)
project.employees.find_by(@employee.id)
project.employees.find_by(@employee)
project.employees.find(@employee.id)
project.employees.find(@employee)
project.employees.employee.id
project.employees.first
project
employee.id
employee
ap @project.employees.employee.id
ap @project.employees.@employee.id
ap @project.employees(@employee)
ap @project.employees.@employee
ap @project.employees.params(@employee)
@project.employees.params(@employee)
@project.employees.params(@employee).delete
@project.params(@employee).delete
@project.@employee.delete
@employee
c
@project.@employee.delete
@project.join.@employee.delete
@project.join. @employee.delete
@project.@employee.delete
@project
ap Project.first.employees.first.delete
ap Project.first.employees
ap Project.first.employees.distinct
ap Project.first.employees.distinct.count
ap Project.first.employees.distinct
ap Project.first.distinct.employees
ap Project.first.employees
Project.first.employees
@employee
@project
c
@project
@project.employees.delete.where(employee: @employee)
@project.employees.@employee.delete
@employee
c
